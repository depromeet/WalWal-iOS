//
//  AppDelegate.swift
//  WalWal
//
//  Created by Ï°∞Ïö©Ïù∏ on 6/22/24.
//

import UIKit
import AppCoordinator

import RxSwift
import RxCocoa
import KakaoSDKCommon
import KakaoSDKAuth
import FirebaseCore
import FirebaseMessaging

@main
final class AppDelegate: UIResponder, UIApplicationDelegate {
  
  var window: UIWindow?
  var appCoordinator: (any AppCoordinator)?
  private let fcmToken = PublishRelay<String>()
  private let callBackDeepLink = PublishRelay<String>()
  
  func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
    
    
    configure(application)
    
    let window = UIWindow(frame: UIScreen.main.bounds)
    self.window = window
    
    let navigationController = UINavigationController()
    
    self.appCoordinator = self.injectWalWalImplement(navigation: navigationController)
    window.rootViewController = navigationController
    window.makeKeyAndVisible()
    
    appCoordinator?.start()
    
    return true
  }
  
  func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
    if (AuthApi.isKakaoTalkLoginUrl(url)) {
      return AuthController.handleOpenUrl(url: url)
    }
    return false
  }
}

private extension AppDelegate {
  func requestAuthorization() {
      UNUserNotificationCenter.current().delegate = self
      
//      let authOptions: UNAuthorizationOptions = [
//          .alert,
//          .badge,
//          .sound
//      ]
//      UNUserNotificationCenter.current().requestAuthorization(
//          options: authOptions,
//          completionHandler: { _, _ in }
//      )
  }

  func getFCMToken() {
    Messaging.messaging().token { token, error in
      if let error = error {
        print("ü§ñ Error fetching FCM registration token: \(error)")
      } else if let token = token {
        print("ü§ñ FCM registration token: \(token)")
        // TODO: - Ïó¨Í∏∞ÏÑú FCMÌÜ†ÌÅ∞ LocalÏóê Ï†ÄÏû• (UserDefault)
      }
    }
  }
  
  func configure(_ application: UIApplication) {
    /// ÏïåÎ¶º Îì±Î°ù
    requestAuthorization()
    /// KakaoSDK Îì±Î°ù
    KakaoSDK.initSDK(appKey: "29e3431e2dc66a607f511c0a05f0963b")
    /// APNSÏóê Device Token Îì±Î°ù
    application.registerForRemoteNotifications()
    /// FirebaseÏÑ§Ï†ï
    FirebaseApp.configure()
    Messaging.messaging().delegate = self
  }
}


extension AppDelegate: UNUserNotificationCenterDelegate, MessagingDelegate {
    
  /// APNs Îì±Î°ù Î∞è ÌÜ†ÌÅ∞ ÏΩúÎ∞±
  func application(
    application: UIApplication,
    didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data
  ) {
    /// APNsÌÜ†ÌÅ∞ ÏÑ∏ÌåÖ
    Messaging.messaging().apnsToken = deviceToken
    /// ÌÜ†ÌÅ∞ Í∞í ÏΩúÎ∞±
    getFCMToken()
  }
  
  /// ÏùºÎ∞òÏ†ÅÏúºÎ°ú Ïï± ÏãúÏûë Ïãú Îì±Î°ùÌÜ†ÌÅ∞ÏùÑ ÌÜµÌï¥, FCM Token Í¥ÄÏ∞∞
  func messaging(
    _ messaging: Messaging,
    didReceiveRegistrationToken fcmToken: String?
  ) {
    guard let fcmToken else { return }
    // TODO: - Ïó¨Í∏∞ÏÑú FCMÌÜ†ÌÅ∞ LocalÏóê Ï†ÄÏû• (UserDefault)
    self.fcmToken.accept(fcmToken)
  }
  
  /// Ïï±Ïù¥ inActive ÏÉÅÌÉúÏùº Îïå, Ïñ¥Îñ§ ÌòïÏãùÏúºÎ°ú notificationÏùÑ Î≥¥Ïó¨Ï§ÑÏßÄ ÏÑ§Ï†ï (Ïù∏Ïï°Ìã∞Î∏å ÏÉÅÌÉúÏóêÏÑú Î≥¥Ïù¥Í∏∞ Ïã´ÏúºÎ©¥ ÏÑ∏ÌåÖ ÏïàÌï¥ÎèÑ Îê®)
  /// ÌòÑÏû¨ ÏÉÅÌÉúÎäî, [Î∞∞ÎÑàÏóê Î±ÉÏßÄ ÌÉÄÏûÖÏúºÎ°ú ÏÜåÎ¶¨ÏôÄ Ìï®Íªò ÎÖ∏Ìã∞Î•º Î≥¥ÎÇ∏Îã§] ÎùºÎäî ÏùòÎØ∏ÏûÑ
  func userNotificationCenter(
    _ center: UNUserNotificationCenter,
    willPresent notification: UNNotification
  ) async -> UNNotificationPresentationOptions {
    return [.banner, .sound, .badge]
  }
  
  /// Ïï±Ïù¥ suspend ÏÉÅÌÉúÏùº Îïå, Î∞∞ÎÑàÎ•º ÎàåÎ†ÄÏùÑ ÎïåÏùò Ï≤òÎ¶¨ (ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î£®Ìä∏ ÏÑ∏ÌåÖ Ìï¥ÏïºÌï® -> urlScheme)
  func userNotificationCenter(
    _ center: UNUserNotificationCenter,
    didReceive response: UNNotificationResponse
  ) async {
    /// let userInfo = response.notification.request.content.userInfo
    /// let urlScheme = userInfo["urlScheme"]
    /// callBackDeepLink.accept(urlScheme)
  }
  
}

